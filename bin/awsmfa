#!/usr/bin/env bash

# Uses the supplied profile to fetch temporary aws session credentials
# and outputs them to a .env file in the current working directory

if [[ $# == 1 ]]; then
  PROFILE="default"
  MFA_TOKEN=${1}
elif [[ $# == 2 ]]; then
  PROFILE=${1}
  MFA_TOKEN=${2}
else
  echo "Usage: ${0} [<profile_name>] <mfa_token>"
  exit 1
fi

echo "Fetching temp credentials with profile [${PROFILE}]..."

AWS_USER_NAME=$( \
  aws sts get-caller-identity --profile ${PROFILE} --query 'Arn' --output text \
  | sed -E 's/arn:aws:iam::[0-9]+:user\///' \
)

if [[ -z $AWS_USER_NAME ]]; then
  echo "ERROR: failed to get user name"
  exit 2
fi

MFA_SERIAL_NUMBER=$( \
  aws iam list-mfa-devices \
    --profile ${PROFILE} \
    --user-name ${AWS_USER_NAME} \
    --query 'MFADevices[].SerialNumber' \
    --output text \
)

if [[ -z $MFA_SERIAL_NUMBER ]]; then
  echo "ERROR: failed to get mfa device info"
  exit 3
fi

SESSION_INFO=$( \
  aws sts get-session-token \
    --profile ${PROFILE} \
    --serial-number ${MFA_SERIAL_NUMBER} \
    --output json \
    --token-code $MFA_TOKEN \
)

if [[ $? -gt 0 ]]; then
  exit $?
fi

AWS_ACCESS_KEY_ID=$( \
  echo ${SESSION_INFO} | sed -n 's/.* "AccessKeyId": "\([^"]*\).*/\1/p' \
)
AWS_SECRET_ACCESS_KEY=$( \
  echo ${SESSION_INFO} | sed -n 's/.*"SecretAccessKey": "\([^"]*\).*/\1/p' \
)
AWS_SESSION_TOKEN=$( \
  echo ${SESSION_INFO} | sed -n 's/.*"SessionToken": "\([^"]*\).*/\1/p' \
)

echo "\
AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}\
" > .env

echo "Success: .env file updated"
exit 0
