#!/usr/bin/env bash

# Uses the supplied profile to fetch temporary aws session credentials and
# assigns them to the profile [default] in ~/.aws/credentials
#
#       THE [default] PROFILE WILL BE OVERWRITTEN BY THIS SCRIPT

if [ $# -lt 2 ]; then
  echo "Usage: ${0} <profile_name> <mfa_token>"
  exit 1
fi

PROFILE=${1}
MFA_TOKEN=${2}

AWS_USER_NAME=$( \
  aws sts get-caller-identity --profile ${PROFILE} --query 'Arn' --output text \
  | sed -E 's/arn:aws:iam::[0-9]+:user\///' \
)

if [[ -z $AWS_USER_NAME ]]; then
  echo "ERROR: failed to get user name"
  exit 2
fi

MFA_SERIAL_NUMBER=$( \
  aws iam list-mfa-devices \
    --profile ${PROFILE} \
    --user-name ${AWS_USER_NAME} \
    --query 'MFADevices[].SerialNumber' \
    --output text \
)

if [[ -z $MFA_SERIAL_NUMBER ]]; then
  echo "ERROR: failed to get mfa device info"
  exit 3
fi

SESSION_INFO=$( \
  aws sts get-session-token \
    --profile ${PROFILE} \
    --serial-number ${MFA_SERIAL_NUMBER} \
    --output json \
    --token-code $MFA_TOKEN \
)

if [[ $? -gt 0 ]]; then
  exit $?
fi

AWS_ACCESS_KEY_ID=$( \
  echo ${SESSION_INFO} | sed -n 's/.* "AccessKeyId": "\([^"]*\).*/\1/p' \
)
AWS_SECRET_ACCESS_KEY=$( \
  echo ${SESSION_INFO} | sed -n 's/.*"SecretAccessKey": "\([^"]*\).*/\1/p' \
)
AWS_SESSION_TOKEN=$( \
  echo ${SESSION_INFO} | sed -n 's/.*"SessionToken": "\([^"]*\).*/\1/p' \
)

aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID}
aws configure set aws_secret_access_key  ${AWS_SECRET_ACCESS_KEY}
aws configure set aws_session_token  ${AWS_SESSION_TOKEN}

echo "success: default profile updated"
exit 0
