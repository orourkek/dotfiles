[user]
  email = korourke@oblong.com
  name = Kevin O'Rourke

[alias]
  fa = fetch --all
  ff = merge --ff-only
  faff = !git fa && git ff

  # View abbreviated SHA, description, and history graph of the latest 20 commits
  l = log --format=format:'%C(yellow)%h%C(reset)%>(12)%ar %C(blue)%<(12,trunc)%ae%C(reset) %<|(80,trunc)%s%C(auto)%+D%C(reset)'

  # View the current working tree status using the short format
  s = status -s

  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -a
  remotes = remote -v

  # Interactive rebase with the given number of latest commits
  reb = "!r() { git rebase -i HEAD~$1; }; r"

  # Find commits by source code
  fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

  # Find commits by commit message
  fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

  # List contributors with number of commits
  contributors = shortlog --summary --numbered

  proon = "!f() { \
    if [ \"$1\" != \"go\" ]; then \
      printf \"\n \\033[45;1;37m DRY RUN \\033[0m (Use \\033[1;30m git proon go \\033[0m to be destructive)\n\n\"; \
    fi; \
    git checkout master && \
    git fetch -p && \
    printf \"\n\\033[41;1;37m ✖ The following fully merged \\033[44;1;37m local \\033[41;1;37m branch(es) will be pruned:\\033[0m\n\n\" && \
    git branch --merged master | grep -v 'master$' | xargs -L 1 echo && \
    printf \"\n\\033[41;1;37m ✖ The following fully merged \\033[44;1;37m remote \\033[41;1;37m branch(es) will be pruned:\\033[0m\n\n\" && \
    git branch -r --merged master | grep -v 'master$' | grep -v '^  gitlab/bfx-' | grep --color=never '^  gitlab/' | xargs -L 1 echo && \
    if [ \"$1\" = \"go\" ]; then \
      printf \"\n\\033[41;1;37m Pruning branches... \\033[0m\n\n\"; \
      git branch --merged master | grep -v 'master$' | xargs -L 1 git branch -d && \
      git branch -r --merged master | grep -v 'master$' | grep -v '^  gitlab/bfx-' | grep --color=never '^  gitlab/' | sed 's/gitlab\\///' | xargs -L 1 git push --delete gitlab ; \
    fi; \
    printf \"\n\"; \
  }; f"

[apply]

  # Detect whitespace errors when applying a patch
  whitespace = fix

[core]

  # Use custom `.gitignore` and `.gitattributes`
  excludesfile = ~/.gitignore
  attributesfile = ~/.gitattributes

  # Treat spaces before tabs and all kinds of trailing whitespace as an error
  # [default] trailing-space: looks for spaces at the end of a line
  # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
  whitespace = space-before-tab,-indent-with-non-tab,trailing-space

  # Make `git rebase` safer on OS X
  # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false

  pager = less -S --quit-if-one-screen --no-init --raw-control-chars

[color]

  # Use colors in Git commands that are capable of colored output when
  # outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
  ui = auto

[color "branch"]

  current = 78 bold
  local = 78
  remote = 222

[color "decorate"]

  branch = 2
  tag = 4
  remoteBranch = cyan
  HEAD = 2
  stash = 15

[color "diff"]

  meta = yellow
  frag = magenta # line info
  old = red # deletions
  new = green # additions
  commit = blue

[color "status"]

  added = 2 #(green) files which are added but not committed
  updated = 4 #(blue) files which are added but not committed
  changed = 3 #(yellow) files which are changed but not added in the index
  untracked = 215 #(orange) files which are not tracked by Git
  #header = white #header text of status message
  branch = 2 #(green) the current branch
  unmerged = magenta #files which have unmerged changes

[diff]

  # Detect copies as well as renames
  renames = copies
	algorithm = patience

[help]

  # Automatically correct and execute mistyped commands
  autocorrect = 1

[merge]

  # Include summaries of merged commits in newly created merge commit messages
  log = true

[push]

  # Use the Git 1.x.x default to avoid errors on machines with old Git
  # installations. To use `simple` instead, add this to your `~/.extra` file:
  # `git config --global push.default simple`. See http://git.io/mMah-w.
  default = current

# URL shorthands

[url "git@github.com:"]

  insteadOf = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"

[url "git://github.com/"]

  insteadOf = "github:"

[url "git@gist.github.com:"]

  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]

  insteadOf = "gist:"
