
" REFERENCE: CTERM COLORS
" --------------------------------
"
" NR-16   NR-8    COLOR NAME
" 0       0       Black
" 1       4       DarkBlue
" 2       2       DarkGreen
" 3       6       DarkCyan
" 4       1       DarkRed
" 5       5       DarkMagenta
" 6       3       Brown, DarkYellow
" 7       7       LightGray, LightGrey, Gray, Grey
" 8       0*      DarkGray, DarkGrey
" 9       4*      Blue, LightBlue
" 10      2*      Green, LightGreen
" 11      6*      Cyan, LightCyan
" 12      1*      Red, LightRed
" 13      5*      Magenta, LightMagenta
" 14      3*      Yellow, LightYellow
" 15      7*      White

" func to run a command and show output in split buffer

function! ExecuteInShell(command, ftype) " {{{
    let command = join(map(split(a:command), 'expand(v:val)'))
    let winnr = bufwinnr('^' . command . '$')
    silent! execute  winnr < 0 ? 'new ' . shellescape(command) : winnr . 'wincmd w'
    execute 'setlocal filetype=' . a:ftype . ' buftype=nowrite bufhidden=wipe nobuflisted noswapfile nowrap nonumber'
    echo 'Execute ' . command . '...'
    silent! execute 'silent %!'. command
    silent! redraw
    "silent! execute 'au BufUnload <buffer> execute bufwinnr(' . bufnr('#') . ') . ''wincmd w'''
    "silent! execute 'nnoremap <silent> <buffer> <LocalLeader>r :call <SID>ExecuteInShell(''' . command . ''')<CR>:AnsiEsc<CR>'
    silent! execute 'nnoremap <silent> <buffer> q :q<CR>'
    silent! execute 'AnsiEsc'
    echo 'Shell command executed: ' . command
endfunction " }}}
command! -complete=shellcmd -nargs=+ Shell call ExecuteInShell(<q-args>, 'shelloutput')


" --------------------------------
" Basic Configuration
" --------------------------------

" obviously...
set encoding=utf-8

" activate pathogen
execute pathogen#infect()

function! OpenUniteIfNoFile()
  if argc() == 0
    :Unite file file_rec -no-split
  elseif isdirectory(argv(0))
    :UniteWithCurrentDir file file_rec -no-split
  endif
endfunction

" open unite if VIM is started with no file
"augroup EnterVimNoFile
"  au VimEnter * call OpenUniteIfNoFile()
"augroup end

"augroup CursorLineFix
  "au VimEnter,BufEnter,WinEnter * setlocal cursorline
"augroup end

function! s:simple_buffer_settings()
  nnoremap <buffer> <q> :q<CR>
  inoremap <buffer> <q> :q<CR>
endfunction

augroup EasyQuitForSimpleBuffers
  autocmd FileType help call s:simple_buffer_settings()
augroup end

" alt + right arrow : go to end of line
inoremap <A-right> <end>
nnoremap <A-right> <end>
" alt + left arrow : go to start of line
inoremap <A-left> <home>
nnoremap <A-left> <home>
" move line up
nnoremap <C-S-k> :m -2<CR>
inoremap <C-S-k> :m -2<CR>
" move line down
nnoremap <C-S-j> :m +1<CR>
inoremap <C-S-j> :m +1<CR>

" binds for scrolling/moving
nnoremap <ScrollWheelUp> 8<C-Y>
inoremap <ScrollWheelUp> <C-O>8<C-Y>
nnoremap <ScrollWheelDown> 8<C-E>
inoremap <ScrollWheelDown> <C-O>8<C-E>
nnoremap <S-up>   {
inoremap <S-up>   <C-O>{
nnoremap <S-down> }
inoremap <S-down> <C-O>}
nnoremap <C-up>   <C-U>
inoremap <C-up>   <C-O><C-U>
nnoremap <C-down> <C-D>
inoremap <C-down> <C-O><C-D>
nnoremap <c-s> :w<CR>
inoremap <c-s> <esc>:w<CR>

" identify highlight group under cursor
map <F9> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
      \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
      \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" activate mouse usage in every mode
set mouse=a

" preview window height
set previewheight=20


" --------------------------------
" general display options
" --------------------------------

" enable syntax highlighting
syntax on

" customize highlighting
"hi javascriptIdentifier ctermfg=DarkMagenta

" show line numbers
set number

" highlight current line
set cursorline
"hi CursorLine ctermbg=Black
nnoremap <kPlus> :set cursorline<cr>
inoremap <kPlus> :set cursorline<cr>

" show column highlight @ 80
set colorcolumn=80

" this is required after I compiled vim 7.4 from source, otherwise the
" backspace key doesn't work
set backspace=2

" ignore case in searches excepted if an uppercase letter is used
set ignorecase
set smartcase

" don't soft wrap lines
set nowrap


" --------------------------------
" whitespace characters
" --------------------------------

"set listchars=eol:↵,tab:⇥,trail:~,extends:⤵,precedes:⤷,nbsp:․
set listchars=eol:↵,tab:⇥\ ,extends:⤵,precedes:⤷,trail:⚫  " •
set list

" NOTE: relevant highlight groups are found
" in either .vimrc-dark or .vimrc-light

" --------------------------------
" indentation
" --------------------------------

" enable file type detection for auto-indent
" @link http://vim.wikia.com/wiki/Indenting_source_code
filetype plugin indent on

" size of a hard tabstop
set tabstop=2

" size of an "indent"
set shiftwidth=2

" a combination of spaces and tabs are used to simulate tab stops at a width other than the (hard)tabstop
set softtabstop=2

" make "tab" insert indents instead of tabs at the beginning of a line
set smarttab

" always uses spaces instead of tab characters
set expandtab


" --------------------------------
" tabline
" --------------------------------

" tab navigation like firefox
nnoremap <S-tab> :tabprevious<CR>
nnoremap <tab>   :tabnext<CR>
nnoremap <c-t>     :tabnew<CR>
"inoremap <c-s-tab> <Esc>:tabprevious<CR>i
"inoremap <c-tab>   <Esc>:tabnext<CR>i
"inoremap <c-t>     <Esc>:tabnew<CR>

" always show tabs
set showtabline=2

" tabline colors
hi TabLine      cterm=none       ctermfg=Black  ctermbg=Green
hi TabLineFill  cterm=underline  ctermfg=Black  ctermbg=DarkGrey
hi TabLineSel   cterm=bold       ctermfg=White  ctermbg=DarkCyan
hi Title        cterm=none       ctermfg=Cyan   ctermbg=none

" --------------------------------
" --------------------------------
" plugin config/options
" --------------------------------
" --------------------------------

" NERDTree
" --------------------------------

" close vim if NERDTree is the only window left
"autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" bind key to open NERDTree
"nmap <F5> :NERDTreeToggle<CR>

" NERDTree-Tabs options:
" Open NERDTree on console vim startup
"let g:nerdtree_tabs_open_on_console_startup = 1

" Do not open NERDTree if vim starts in diff mode
"let g:nerdtree_tabs_no_startup_for_diff = 1

" On startup, focus NERDTree if opening a directory, focus file if opening a
" file. (When set to 2, always focus file window after startup)
"let g:nerdtree_tabs_smart_startup_focus = 1

" Automatically find and select currently opened file in NERDTree
"let g:nerdtree_tabs_autofind = 1


" vim-airline
" --------------------------------

" always show vim-airline
set laststatus=2

let g:airline_powerline_fonts = 1
let g:airline_detect_modified=1
let g:airline_detect_paste=1
let g:airline_detect_iminsert=0
let g:airline_exclude_preview = 0
" enable airline's tabline
let g:airline#extensions#tabline#enabled = 1
" disable showing tab type (far right)
let g:airline#extensions#tabline#show_tab_type = 0
" configure whether close button should be shown
let g:airline#extensions#tabline#show_close_button = 0

" configure truncating non-active buffer names to specified length
"let g:airline#extensions#tabline#fnametruncate = 12

" configure collapsing parent directories in buffer name
"let g:airline#extensions#tabline#fnamecollapse = 0

" configure whether buffer numbers should be shown
let g:airline#extensions#tabline#buffer_nr_show = 0

" enable/disable displaying index of the buffer
let g:airline#extensions#tabline#buffer_idx_mode = 0

"let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline#extensions#tabline#fnamemod = ':t'

let g:airline_theme='murmur'

" git-gutter
" --------------------------------

highlight GitGutterAdd ctermfg=Green
highlight GitGutterChange ctermfg=Yellow
highlight GitGutterDelete ctermfg=Red
highlight GitGutterChangeDelete ctermfg=Red

let g:gitgutter_sign_added =                '✚' " ☑
let g:gitgutter_sign_modified =             '✱' " ⁕ ⁂ ✳ ⋇ ✸ ✱ ✰ ✪ ❋ ❊ ⚫
let g:gitgutter_sign_removed =              '✂' " ✖ ✘ ✗ ✕ ⚑ ⚊ ☒
let g:gitgutter_sign_removed_first_line =   '▔'
let g:gitgutter_sign_modified_removed =     '✱▁'


" ctrl-p
" -------------------------------

"nmap <F6> :CtrlPMixed<CR>
"let g:ctrlp_prompt_mappings = {
"    \ 'AcceptSelection("e")': ['<c-t>'],
"    \ 'AcceptSelection("t")': ['<cr>', '<2-LeftMouse>'],
"  \ }


" unite
" -------------------------------

" enable history yank source
let g:unite_source_history_yank_enable = 1

" shorten the default update date of 500ms
let g:unite_update_time = 300

" highlight like my vim
let g:unite_cursor_line_highlight = 'CursorLine'

" set up coolguy arrow prompt
let g:unite_prompt = '➜ '

" highlight like my vim
let g:unite_cursor_line_highlight = 'CursorLine'

" use the fuzzy matcher for everything
call unite#filters#matcher_default#use(['matcher_fuzzy'])

" use the rank sorter for everything
call unite#filters#sorter_default#use(['sorter_rank'])

" use ack in unite grep source.
if executable('ack-grep')
  let g:unite_source_grep_command = 'ack-grep'
  let g:unite_source_grep_default_opts = '-i --nogroup --no-color -H --ignore-dir=node_modules --ignore-dir=vendor --ignore-dir=user-docs'
  let g:unite_source_grep_recursive_opt = ''
endif

" set up some custom ignores
call unite#custom_source('file_rec,file_rec/async,file_mru,file,buffer,grep',
      \ 'ignore_pattern', join([
      \ '\.git/',
      \ 'git5/.*/review/',
      \ 'google/obj/',
      \ 'tmp/',
      \ 'lib/Cake/',
      \ 'node_modules/',
      \ 'vendor/',
      \ 'Vendor/',
      \ 'app_old/',
      \ 'acf-laravel/',
      \ 'plugins/',
      \ 'bower_components/',
      \ '.sass-cache',
      \ 'web/wp',
      \ ], '\|'))

" KEY BINDINGS
nnoremap <leader>o :Unite file file_rec<cr>
nnoremap <leader>f :Unite grep:.<cr>
nnoremap <C-p> :Unite history/yank<cr>
nnoremap <leader>p :Unite history/yank<cr>

" custom mappings for unite buffer
augroup UniteSettings
  autocmd FileType unite call s:unite_settings()
augroup end

function! s:unite_settings()
  imap <buffer><expr> <tab> unite#do_action('tabopen')
  nmap <buffer><expr> <tab> unite#do_action('tabopen')
  "nmap <buffer> <ESC> <Plug>(unite_exit)
  imap <buffer><expr> <c-right> unite#do_action('right')
  nmap <buffer><expr> <c-right> unite#do_action('right')
  imap <buffer><expr> <c-left> unite#do_action('left')
  nmap <buffer><expr> <c-left> unite#do_action('left')
endfunction

call unite#custom#profile('default', 'context', {
  \ 'winheight' : 10,
  \ 'start_insert' : 1,
  \ 'prompt_visible': 1,
  \ 'marked_icon': '✓',
  \ })


" delimitMate
" -------------------------------

" expand CR
let delimitMate_expand_cr = 1

" expand spaces
let delimitMate_expand_space = 1

" This option turns on/off the jumping over <CR> and <Space> expansions when
" inserting closing matchpairs
let delimitMate_jump_expansion = 1

" in js files, automatically insert ";" when expanding a matchpair
au FileType javascript let b:delimitMate_insert_eol_marker = 2
au FileType javascript let b:delimitMate_eol_marker = ";"


" TagBar
" -------------------------------

nmap <leader>t :TagbarToggle<CR>

"autocmd FileType javascript,less,html nested :TagbarOpen


" Fugitive (Git wrapper)
" -------------------------------

nmap <leader>gs :Gstatus<CR>
nmap <leader>ga :Git add %:p<CR><CR>
nmap <leader>gc :Gcommit -v<CR>
nmap <leader>gd :call ExecuteInShell('git diff --color %:p', 'gitdiff')<CR>:set number<CR>:set nocursorline<CR>
nmap <leader>gD :call ExecuteInShell('git diff --color', 'gitdiff')<CR>:set number<CR>:set nocursorline<CR>
nmap <leader>gl :call ExecuteInShell('git lga -20', 'gitlog')<CR>
nmap <leader>gL :call ExecuteInShell('git lga', 'gitlog')<CR>
" no color version:
"nmap <leader>gl :call ExecuteInShell('git log --pretty=oneline --graph --all --decorate --abbrev-commit', 'gitlog')<CR>

"augroup FugitiveBinds
"  autocmd FileType gitcommit call s:fugitive_binds()
"augroup end

"function! s:fugitive_binds()
"  nnoremap <buffer> <silent> + :<C-U>silent execute <SID>StageToggle(line('.'),line('.')+v:count1-1)<CR>
"endfunction

set background=dark

if (&background == "dark")
  source ~/.vimrc-dark
else
  source ~/.vimrc-light
endif
